// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package airco2ntrol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TimeFrame struct {
	From                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimeFrame) Reset()         { *m = TimeFrame{} }
func (m *TimeFrame) String() string { return proto.CompactTextString(m) }
func (*TimeFrame) ProtoMessage()    {}
func (*TimeFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *TimeFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeFrame.Unmarshal(m, b)
}
func (m *TimeFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeFrame.Marshal(b, m, deterministic)
}
func (m *TimeFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeFrame.Merge(m, src)
}
func (m *TimeFrame) XXX_Size() int {
	return xxx_messageInfo_TimeFrame.Size(m)
}
func (m *TimeFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeFrame.DiscardUnknown(m)
}

var xxx_messageInfo_TimeFrame proto.InternalMessageInfo

func (m *TimeFrame) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TimeFrame) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type AirQuality struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tmp                  float32              `protobuf:"fixed32,2,opt,name=tmp,proto3" json:"tmp,omitempty"`
	Co2                  float32              `protobuf:"fixed32,3,opt,name=co2,proto3" json:"co2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AirQuality) Reset()         { *m = AirQuality{} }
func (m *AirQuality) String() string { return proto.CompactTextString(m) }
func (*AirQuality) ProtoMessage()    {}
func (*AirQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *AirQuality) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AirQuality.Unmarshal(m, b)
}
func (m *AirQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AirQuality.Marshal(b, m, deterministic)
}
func (m *AirQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirQuality.Merge(m, src)
}
func (m *AirQuality) XXX_Size() int {
	return xxx_messageInfo_AirQuality.Size(m)
}
func (m *AirQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_AirQuality.DiscardUnknown(m)
}

var xxx_messageInfo_AirQuality proto.InternalMessageInfo

func (m *AirQuality) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *AirQuality) GetTmp() float32 {
	if m != nil {
		return m.Tmp
	}
	return 0
}

func (m *AirQuality) GetCo2() float32 {
	if m != nil {
		return m.Co2
	}
	return 0
}

type Batch struct {
	Items                []*AirQuality `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetItems() []*AirQuality {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*TimeFrame)(nil), "airco2ntrol.TimeFrame")
	proto.RegisterType((*AirQuality)(nil), "airco2ntrol.AirQuality")
	proto.RegisterType((*Batch)(nil), "airco2ntrol.Batch")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x95, 0x84, 0x02, 0xb9, 0x2c, 0xe8, 0x06, 0x88, 0xb2, 0x50, 0x65, 0xaa, 0x90, 0x70,
	0x91, 0x91, 0x2a, 0xd6, 0x32, 0xc0, 0x4c, 0xda, 0x17, 0x70, 0x2d, 0x37, 0x18, 0xc5, 0xbd, 0xc8,
	0xbd, 0x0e, 0xec, 0x3c, 0x38, 0xaa, 0xad, 0xb6, 0x74, 0x00, 0xba, 0x59, 0xbf, 0xbf, 0xcf, 0xf7,
	0xfb, 0x20, 0x57, 0xbd, 0x15, 0xbd, 0x27, 0x26, 0x2c, 0x94, 0xf5, 0x9a, 0xe4, 0x8a, 0x3d, 0x75,
	0xd5, 0x6d, 0x4b, 0xd4, 0x76, 0x66, 0x1c, 0xae, 0x16, 0x9b, 0xe5, 0x98, 0xad, 0x33, 0x6b, 0x56,
	0xae, 0x8f, 0x74, 0xdd, 0x42, 0x3e, 0xb7, 0xce, 0xbc, 0x78, 0xe5, 0x0c, 0x0a, 0x38, 0x5b, 0x7a,
	0x72, 0x65, 0x32, 0x4c, 0x46, 0x85, 0xac, 0x44, 0x94, 0xc5, 0x4e, 0x16, 0xf3, 0x9d, 0xdc, 0x04,
	0x0e, 0xef, 0x20, 0x65, 0x2a, 0xd3, 0x7f, 0xe9, 0x94, 0xa9, 0xfe, 0x00, 0x98, 0x5a, 0xff, 0xb6,
	0x51, 0x9d, 0xe5, 0x4f, 0x7c, 0x82, 0x7c, 0xdf, 0xe4, 0x84, 0x71, 0x07, 0x18, 0xaf, 0x20, 0x63,
	0xd7, 0x87, 0xa1, 0x69, 0xb3, 0x3d, 0x6e, 0x13, 0x4d, 0xb2, 0xcc, 0x62, 0xa2, 0x49, 0xd6, 0x13,
	0x18, 0x3c, 0x2b, 0xd6, 0xef, 0x78, 0x0f, 0x03, 0xcb, 0xc6, 0xad, 0xcb, 0x64, 0x98, 0x8d, 0x0a,
	0x79, 0x23, 0x7e, 0xec, 0x46, 0x1c, 0xea, 0x34, 0x91, 0x92, 0x5f, 0x09, 0x5c, 0xcc, 0x98, 0xbc,
	0x6a, 0x0d, 0x4e, 0xe0, 0xf2, 0xd5, 0x70, 0x7c, 0xe6, 0xfa, 0xc8, 0xdb, 0xef, 0xab, 0xc2, 0xa3,
	0x3c, 0xb2, 0xd3, 0xe0, 0xcd, 0xec, 0x4a, 0x1b, 0xfc, 0xe3, 0x4b, 0xd5, 0x6f, 0x5d, 0x1e, 0x92,
	0xc5, 0x79, 0xc0, 0x1f, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21, 0x98, 0x8b, 0x6a, 0xd5, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	GetBatch(ctx context.Context, in *TimeFrame, opts ...grpc.CallOption) (*Batch, error)
	GetSince(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (Storage_GetSinceClient, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) GetBatch(ctx context.Context, in *TimeFrame, opts ...grpc.CallOption) (*Batch, error) {
	out := new(Batch)
	err := c.cc.Invoke(ctx, "/airco2ntrol.Storage/GetBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSince(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (Storage_GetSinceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/airco2ntrol.Storage/GetSince", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageGetSinceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_GetSinceClient interface {
	Recv() (*AirQuality, error)
	grpc.ClientStream
}

type storageGetSinceClient struct {
	grpc.ClientStream
}

func (x *storageGetSinceClient) Recv() (*AirQuality, error) {
	m := new(AirQuality)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	GetBatch(context.Context, *TimeFrame) (*Batch, error)
	GetSince(*timestamp.Timestamp, Storage_GetSinceServer) error
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) GetBatch(ctx context.Context, req *TimeFrame) (*Batch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (*UnimplementedStorageServer) GetSince(req *timestamp.Timestamp, srv Storage_GetSinceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSince not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airco2ntrol.Storage/GetBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetBatch(ctx, req.(*TimeFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSince_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(timestamp.Timestamp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).GetSince(m, &storageGetSinceServer{stream})
}

type Storage_GetSinceServer interface {
	Send(*AirQuality) error
	grpc.ServerStream
}

type storageGetSinceServer struct {
	grpc.ServerStream
}

func (x *storageGetSinceServer) Send(m *AirQuality) error {
	return x.ServerStream.SendMsg(m)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airco2ntrol.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBatch",
			Handler:    _Storage_GetBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSince",
			Handler:       _Storage_GetSince_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
