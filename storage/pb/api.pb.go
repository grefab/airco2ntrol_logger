// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package airco2ntrol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AirQuality struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tmp                  float32              `protobuf:"fixed32,2,opt,name=tmp,proto3" json:"tmp,omitempty"`
	Co2                  float32              `protobuf:"fixed32,3,opt,name=co2,proto3" json:"co2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AirQuality) Reset()         { *m = AirQuality{} }
func (m *AirQuality) String() string { return proto.CompactTextString(m) }
func (*AirQuality) ProtoMessage()    {}
func (*AirQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *AirQuality) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AirQuality.Unmarshal(m, b)
}
func (m *AirQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AirQuality.Marshal(b, m, deterministic)
}
func (m *AirQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirQuality.Merge(m, src)
}
func (m *AirQuality) XXX_Size() int {
	return xxx_messageInfo_AirQuality.Size(m)
}
func (m *AirQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_AirQuality.DiscardUnknown(m)
}

var xxx_messageInfo_AirQuality proto.InternalMessageInfo

func (m *AirQuality) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *AirQuality) GetTmp() float32 {
	if m != nil {
		return m.Tmp
	}
	return 0
}

func (m *AirQuality) GetCo2() float32 {
	if m != nil {
		return m.Co2
	}
	return 0
}

func init() {
	proto.RegisterType((*AirQuality)(nil), "airco2ntrol.AirQuality")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0xcc, 0x2c, 0x4a, 0xce, 0x37, 0xca, 0x2b, 0x29,
	0xca, 0xcf, 0x91, 0x92, 0x4f, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x4b, 0x25, 0x95, 0xa6,
	0xe9, 0x97, 0x64, 0xe6, 0xa6, 0x16, 0x97, 0x24, 0xe6, 0x16, 0x40, 0x54, 0x2b, 0x65, 0x71, 0x71,
	0x39, 0x66, 0x16, 0x05, 0x96, 0x26, 0xe6, 0x64, 0x96, 0x54, 0x0a, 0x59, 0x70, 0x71, 0xc2, 0x15,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x49, 0xe9, 0x41, 0x8c, 0xd0, 0x83, 0x19, 0xa1, 0x17,
	0x02, 0x53, 0x11, 0x84, 0x50, 0x2c, 0x24, 0xc0, 0xc5, 0x5c, 0x92, 0x5b, 0x20, 0xc1, 0xa4, 0xc0,
	0xa8, 0xc1, 0x14, 0x04, 0x62, 0x82, 0x44, 0x92, 0xf3, 0x8d, 0x24, 0x98, 0x21, 0x22, 0xc9, 0xf9,
	0x46, 0x46, 0x3e, 0x5c, 0xec, 0xc1, 0x25, 0xf9, 0x45, 0x89, 0xe9, 0xa9, 0x42, 0x8e, 0x5c, 0x1c,
	0xee, 0xa9, 0x25, 0xc1, 0x99, 0x79, 0xc9, 0xa9, 0x42, 0x78, 0x6c, 0x90, 0x12, 0xd7, 0x43, 0xf2,
	0x8d, 0x1e, 0xc2, 0xa5, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xe5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0x8c, 0x5e, 0x6a, 0xfb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	GetSince(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (Storage_GetSinceClient, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) GetSince(ctx context.Context, in *timestamp.Timestamp, opts ...grpc.CallOption) (Storage_GetSinceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/airco2ntrol.Storage/GetSince", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageGetSinceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_GetSinceClient interface {
	Recv() (*AirQuality, error)
	grpc.ClientStream
}

type storageGetSinceClient struct {
	grpc.ClientStream
}

func (x *storageGetSinceClient) Recv() (*AirQuality, error) {
	m := new(AirQuality)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	GetSince(*timestamp.Timestamp, Storage_GetSinceServer) error
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) GetSince(req *timestamp.Timestamp, srv Storage_GetSinceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSince not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_GetSince_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(timestamp.Timestamp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).GetSince(m, &storageGetSinceServer{stream})
}

type Storage_GetSinceServer interface {
	Send(*AirQuality) error
	grpc.ServerStream
}

type storageGetSinceServer struct {
	grpc.ServerStream
}

func (x *storageGetSinceServer) Send(m *AirQuality) error {
	return x.ServerStream.SendMsg(m)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airco2ntrol.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSince",
			Handler:       _Storage_GetSince_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
